import { Injectable } from '@angular/core';
import { AngularFirestore } from '@angular/fire/compat/firestore';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { catchError, exhaustMap, of, withLatestFrom } from 'rxjs';
import { map, mergeMap } from 'rxjs';
import { appService } from '../app.service';
import * as AppActions from './app.actions';

@Injectable()
export class AppEffects {
  getMessages$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AppActions.getMesseges),
      mergeMap(() => {
        return this.appService.fetchMesseges().pipe(
          map((messages) => {
            let properMapedMessages = [];
            const ids = Object.keys(messages);
            for (let i = 0; i < ids.length; i++) {
              properMapedMessages.push({
                autogeneratedID: ids[i],
                name: messages[ids[i]].name,
                message: messages[ids[i]].message,
              });
            }
            return AppActions.getMessegesSuccess({
              messages: properMapedMessages,
            });
          }),
          catchError((error) =>
            of(AppActions.getMessegesFailure({ error: error.message }))
          )
        );
      })
    )
  );

  addMessage$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AppActions.addMessage),
      mergeMap((action) => {
        const message = action.message;
        this.firestore.collection('messages').doc().set(action.message);

        return this.appService.addMessage(action.message).pipe(
          map((autogeneratedID) => {
            this.snackBar.open('Message added successfully!', null, {
              panelClass: ['green-snackbar'],
            });
            return AppActions.addMessageSuccess({
              autogeneratedID: autogeneratedID.name,
              message,
            });
          }),
          catchError((error) =>
            of(AppActions.addMessageFailure({ error: error.message }))
          )
        );
      })
    )
  );

  removeMessage$ = createEffect(() =>
    this.actions$.pipe(
      ofType(AppActions.removeMessage),
      mergeMap((action) => {
        return this.appService.removeMessage(action.autogeneratedID).pipe(
          map(() => {
            this.snackBar.open('Message deleted successfully!', null, {
              panelClass: ['red-snackbar'],
            });
            return AppActions.removeMessageSuccess({
              autogeneratedID: action.autogeneratedID,
            });
          }),
          catchError((error) =>
            of(AppActions.removeMessageFailure({ error: error.message }))
          )
        );
      })
    )
  );

  constructor(
    private actions$: Actions,
    private appService: appService,
    private snackBar: MatSnackBar,
    private firestore: AngularFirestore
  ) {}
}
